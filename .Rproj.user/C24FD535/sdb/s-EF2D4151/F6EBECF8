{
    "contents" : "library(plyr)\nlibrary(reshape2)\nlibrary(reshape)\nlibrary(FD)\nlibrary(ggplot2)\n\ntrim <- function(x) {\n  gsub('\\\\s+', '',x)\n}\n\n\nCV <- function(x){\n  sqrt(var(x))/mean(x)\n}\n\n\nunits.SLA <- function(df) {\n  \n  df$SLA.units_new <- \"m2/kg\"\n  \n  for(i in 1:nrow(df)) {    \n    \n    if (df$SLA.units[i] == \"cm2/g\") {\n      df$SLA[i] <- df$SLA[i] * 0.1\n      \n    }          \n    \n  }\n  \n  return(df)\n  \n}\n\n\nunits.LMA <- function(df) {\n  \n  df$SLAfromLMA <- \"NA\"\n   \n    for(i in 1:nrow(df)) {    \n      \n      if (df$LMA.units[i] == \"g/cm2\") {\n        df$SLAfromLMA[i] <- 1 / (df$LMA[i]/1000) # the units for Rach's fieldwork data appear to be wrong, should be g/m2?\n        \n      } else {\n        if (df$LMA.units[i] == \"g/m2\") {\n          df$SLAfromLMA[i] <- 1/(df$LMA[i]/1000)      \n          \n          }\n        }\n      }\n      \n  return(df)\n}\n  \n\nSLA_LMA.combine <- function(df) {\n\n  for(i in 1:nrow(df)) {    \n    \n    if (is.na(df$SLA[i])) {\n      df$SLA[i] <- df$SLAfromLMA[i]\n    }\n  }\n  \nreturn(df)\n\n}\n\n\nunits.WD <- function(df) {\n      \n    for(i in 1:nrow(df)) {    \n      \n      if(is.na(df$wood.density[i])) {\n        df$wood.density[i] <- as.numeric(\"NA\")\n        \n       } else {          \n          if (df$wood.density[i] < 10) {\n            df$wood.density[i] <- as.numeric(df$wood.density[i])\n            \n          } else {\n            if (df$wood.density[i] > 10) {\n              df$wood.density[i] <- as.numeric(df$wood.density[[i]]) * 0.001\n            }\n          }                  \n      }                \n    }\n    \n    return(df)\n    \n  }\n\ncapitalise <- function(x){\n  first <- toupper(substr(x, start=1, stop=1)) ## capitalize first letter\n  rest <- tolower(substr(x, start=2, stop=nchar(x)))   ## everything else lowercase\n  paste0(first, rest)\n}\n\n\nmissing <- function(df) { # finds number of NA values in each row\n  \n  df$missing <- c(1)\n  \n  for(i in 1:nrow(df)) {    \n    \n    zap <- as.numeric(df[i,])\n    \n    zap.length <- length(zap[is.na(zap)])\n    \n    df$missing[i] <- zap.length\n    \n  }\n  \n  return(df)\n  \n}\n\nrich.est <- function(df) {\n  \n  rich <- data.frame()\n  \n  for(i in 1:length(unique(df$site))) {\n    \n    site <- subset(df, site == i)[,4:255] # this pertains specifically to vegSurveys... \n    \n    site.ACE  <- ACE(site, taxa.row=FALSE)\n    site.chao <- chao1(site, taxa.row=FALSE)\n    site.jack <- jack1(site, taxa.row=FALSE, abund=TRUE)\n    site.boot <- bootstrap(site, taxa.row=FALSE, abund=TRUE)\n    \n    metrics <- data.frame(cbind(site.chao, site.jack, site.ACE, site.boot))\n    \n    rich <- rbind(rich, metrics)\n    \n  }\n  \n  colnames(rich) <- c(\"ACE\", \"chao\", \"jacknife\", \"bootstrap\")\n  return(rich)\n  \n}\n\n\ncompare.hydro <- function(df1,df2) {\n  \n  z <- data.frame(matrix(NA, nrow = 20))\n  \n  for(i in 1:ncol(df1)) {\n    \n    y <- data.frame()\n    \n    metric <- colnames(df1[i])\n    \n    for(j in 1:nrow(df1)) {\n      \n      x <- (df1[j,metric]/df2[j,metric]) - 1\n      \n      y <- rbind(y,x)\n      \n    }\n    \n    z <- cbind(z,y)\n  }\n  \n  z <- z[,-1]\n  colnames(z) <- colnames(df1)\n  \n  return(z)\n}\n\n\n###### PLOTTING #######\n\nplot.linear <- function(df, var, trait) { # var is alphaT/betaT/ts/Rs, etc.\n  \n  \n  figureDir <- \"C:/Users/James/Desktop/stuff/data/analysis/R/SEQLD/output/figures\"\n  traitDir <- deparse(substitute(trait))\n  varDir <- deparse(substitute(var))\n  \n  outDir <- sprintf(\"%s/%s/%s/linear\", figureDir, traitDir, varDir)\n  \n  dir.create(outDir, recursive=TRUE)\n  \n  labels <- list(\"ylab\" <- c(deparse(substitute(trait))))\n  \n  for(i in 1:ncol(df)) {\n    hydro <- df[[i]]  \n    hydroname <- as.expression(colnames(df[i]))   \n    fit.linear <- lm(var ~ hydro, data = df)\n    \n    #  padj <- labels$p.adj[i]\n    r2 <- signif(summary(fit.linear)$r.squared, 5)\n    pval <- anova(fit.linear)[1,\"Pr(>F)\"]\n    \n     #   tiff(sprintf(\"%s/%s_pval-%s_r2-%s.png\", outDir, hydroname, pval, r2), width = 400, height = 300)\n    \n    svg(sprintf(\"%s/%s_pval-%s_r2-%s.svg\", outDir, hydroname, pval, r2), width = 6.7, height = 5, pointsize=12)\n    \n    p <- qplot(hydro, var, data = df) \n    p <- p + geom_point(size = 3)\n    \n    p <- p + stat_smooth(aes(group = 1), method = \"lm\", formula = y ~ x, fullrange=TRUE, se=TRUE, col=\"black\", alpha = 0.2) \n    p <- p + xlab(hydroname)\n    p <- p + ylab(c(\"FDis.SES\"))  \n    p <- p + theme_bw() \n    p <- p + theme_set(theme_bw(base_size = 18))\n    p <- p + theme(legend.position = \"none\",\n                   axis.text = element_text(size = rel(1)),\n                   #                   axis.title.y = element_text(hjust=0.35),\n                   axis.title.x = element_text(vjust=0.35),\n                   panel.border = element_blank(),\n                   panel.grid.minor = element_blank(),\n                   panel.grid.major = element_blank(),\n                   axis.line = element_line(size=.2, color = \"black\"))\n    \n    print(p)\n    \n    \n    print(p) \n    dev.off()\n  }\n}\n\nplot.quad <- function(df, var, trait, labels) { # var is alphaT/betaT/ts/Rs, etc.\n  \n  \n  figureDir <- \"C:/Users/James/Desktop/stuff/data/analysis/R/SEQLD/output/figures\"\n  traitDir <- deparse(substitute(trait))\n  varDir <- deparse(substitute(var))\n  \n  outDir <- sprintf(\"%s/%s/%s/quad\", figureDir, traitDir, varDir)\n  \n  dir.create(outDir, recursive=TRUE)\n  \n  labels <- list(\"ylab\" <- c(deparse(substitute(trait))))\n  \n  for(i in 1:ncol(df)) {\n    hydro <- df[[i]]  \n    hydroname <- as.expression(colnames(df[i]))   \n    fit.quad <- lm(var ~ hydro + I(hydro^2), data = df)\n    \n    #  padj <- labels$p.adj[i]\n    r2 <- signif(summary(fit.quad)$r.squared, 5)\n    pval <- anova(fit.quad)[1,\"Pr(>F)\"]\n    \n     # tiff(sprintf(\"%s/%s_pval-%s_r2-%s.png\", outDir, hydroname, pval, r2), width = 400, height = 300)\n    svg(sprintf(\"%s/%s_pval-%s_r2-%s.svg\", outDir, hydroname, pval, r2), width = 6.7, height = 5, pointsize=12)\n    \n    \n    \n    p <- qplot(hydro, var, data = df) \n    p <- p + geom_point(size = 3)\n    \n    p <- p + stat_smooth(aes(group = 1), method = \"lm\", formula = y ~ x + I(x^2), se=TRUE, col=\"black\", alpha = 0.2) \n    p <- p + xlab(hydroname)\n    p <- p + ylab(c(\"FDis.SES\"))  \n    p <- p + theme_bw() \n    p <- p + theme_set(theme_bw(base_size = 18))\n    p <- p + theme(legend.position = \"none\",\n                   axis.text = element_text(size = rel(1)),\n                   #                   axis.title.y = element_text(hjust=0.35),\n                   axis.title.x = element_text(vjust=0.35),\n                   panel.border = element_blank(),\n                   panel.grid.minor = element_blank(),\n                   panel.grid.major = element_blank(),\n                   axis.line = element_line(size=.2, color = \"black\"))\n    \n    print(p)\n    dev.off()\n  }\n}\n\n\ngetStats <- function(df, var, trait) {\n  \n  # create / set output directory\n  \n  statsDir <- \"C:/Users/James/Desktop/stuff/data/analysis/R/SEQLD/output/stats\"\n  \n  dir.create(statsDir, recursive=TRUE, showWarnings=FALSE)\n  \n  # output stats for each metric to dataframe\n  \n  y <- data.frame()\n  \n  for(i in 1:ncol(df)) {\n    \n    hydro <- df[[i]]  \n    hydroname <- as.expression(colnames(df[i]))  \n    \n    fit.linear <- lm(var ~ hydro, data = df)\n    fit.quad <- lm(var ~ hydro + I(hydro^2), data = df)\n    \n    r2.linear <- signif(summary(fit.linear)$r.squared, 5)\n    pval.linear <- anova(fit.linear)[1,\"Pr(>F)\"]\n    \n    r2.quad <- signif(summary(fit.quad)$r.squared, 5)\n    quad.summ <- summary(fit.quad)\n    pval.quad <- pf(quad.summ$fstatistic[1], quad.summ$fstatistic[2], quad.summ$fstatistic[3],lower.tail = FALSE)\n    \n    x <- cbind(pval.linear, r2.linear, pval.quad, r2.quad)\n    \n    x <- as.data.frame(x)\n    \n    x <- cbind(as.character(hydroname), x)\n    \n    colnames(x) <- c(\"metric\", \"pval.linear\", \"r2.linear\", \"pval.quad\", \"r2.quad\")\n    \n    if (pval.quad < 0.05) { \n      y <- rbind(x,y)\n    }\n    \n  }\n  \n  var <- deparse(substitute(var))\n  \n  y$padj.linear <- p.adjust(y$pval.linear, method=\"BH\")\n  y$padj.quad <- p.adjust(y$pval.quad, method=\"BH\")\n  \n  write.csv(y, sprintf(\"%s/%s_stats.csv\", statsDir, var))\n  \n  return(y)\n  \n}\n\ngetAllStats <- function(df, var, trait) {\n  \n  y <- data.frame()\n  \n  for(i in 1:ncol(df)) {\n    \n    hydro <- df[[i]]  \n    hydroname <- as.expression(colnames(df[i]))  \n    \n    fit.linear <- lm(var ~ hydro, data = df)\n    fit.quad <- lm(var ~ hydro + I(hydro^2), data = df)\n    \n    r2.linear <- signif(summary(fit.linear)$r.squared, 5)\n    pval.linear <- anova(fit.linear)[1,\"Pr(>F)\"]\n    fstat.linear <- signif(summary(fit.linear)$fstatistic[1], 4)\n    \n    r2.quad <- signif(summary(fit.quad)$r.squared, 5)\n    pval.quad <- anova(fit.quad)[1,\"Pr(>F)\"]\n    fstat.quad <- signif(summary(fit.quad)$fstatistic[1], 4)\n    \n    \n    x <- cbind(pval.linear, r2.linear, fstat.linear, pval.quad, r2.quad, fstat.quad)\n    \n    x <- as.data.frame(x)\n    \n    x <- cbind(as.character(hydroname), x)\n    \n    colnames(x) <- c(\"metric\", \"pval.linear\", \"r2.linear\", \"f statistic linear\", \"pval.quad\", \"r2.quad\", \"f statistic quad\")\n    \n    y <- rbind(x,y)\n    \n  }\n  \n  var <- deparse(substitute(var))\n  \n  y <- y[order(y$pval.quad),]\n  \n  return(y)\n  \n}\n\n\nnth.delete <- function(df, init, n) {\n  df[-(seq(init,to=nrow(df), by=n)),]\n}\n\nrework <- function(df) {\n  x <- data.frame(cbind(df[seq(1,to=nrow(df), by=2),],\n                        df[seq(2,to=nrow(df), by=2),]))\n  return(x)\n}\n\ngetStats.linear <- function(df, var, trait) {\n  \n  # create / set output directory\n  \n  statsDir <- \"C:/Users/James/Desktop/stuff/data/analysis/R/SEQLD/output/stats\"\n  \n  dir.create(statsDir, recursive=TRUE, showWarnings=FALSE)\n  \n  # output stats for each metric to dataframe\n  \n  y <- data.frame()\n  \n  for(i in 1:ncol(df)) {\n    \n    hydro <- df[[i]]  \n    hydroname <- as.expression(colnames(df[i]))  \n    \n    fit.linear <- lm(var ~ hydro, data = df)\n    fit.quad <- lm(var ~ hydro + I(hydro^2), data = df)\n    \n    r2.linear <- signif(summary(fit.linear)$r.squared, 5)\n    pval.linear <- anova(fit.linear)[1,\"Pr(>F)\"]\n    \n    r2.quad <- signif(summary(fit.quad)$r.squared, 5)\n    quad.summ <- summary(fit.quad)\n    #pval.quad <- pf(quad.summ$fstatistic[1], quad.summ$fstatistic[2], quad.summ$fstatistic[3],lower.tail = FALSE)\n    \n    coeffs.linear <- t(data.frame(summary(fit.linear)$coefficients[2,]))\n\n    \n    x <- cbind(r2.linear, coeffs.linear)\n    \n    rownames(x) <- as.character(hydroname)\n    \n    colnames(x) <- c(\"R2.linear\", colnames(coeffs.linear))\n    \n    x <- as.data.frame(x)\n    \n    \n    \n    #x <- cbind(as.character(hydroname), x)\n    \n #   colnames(x) <- c(\"metric\", \"pval.linear\", \"r2.linear\", \"pval.quad\", \"r2.quad\")\n    \n    if (pval.linear < 0.05) { \n      y <- rbind(x,y)\n    }\n    \n  }\n  \n  var <- deparse(substitute(var))\n  \n  #y$padj.linear <- p.adjust(y$pval.linear, method=\"BH\")\n  #y$padj.quad <- p.adjust(y$pval.quad, method=\"BH\")\n  \n  write.csv(y, sprintf(\"%s/%s_stats.csv\", statsDir, var))\n  \n  return(y)\n  \n}\n\n\ngetStats.quad <- function(df, var, trait) {\n  \n  # create / set output directory\n  \n  statsDir <- \"C:/Users/James/Desktop/stuff/data/analysis/R/SEQLD/output/stats\"\n  \n  dir.create(statsDir, recursive=TRUE, showWarnings=FALSE)\n  \n  # output stats for each metric to dataframe\n  \n  y <- data.frame()\n  \n  for(i in 1:ncol(df)) {\n    \n    hydro <- df[[i]]  \n    hydroname <- as.expression(colnames(df[i]))  \n    \n    fit.quad <- lm(var ~ hydro + I(hydro^2), data = df)\n    \n    r2.quad <- signif(summary(fit.quad)$r.squared, 5)\n    quad.summ <- summary(fit.quad)\n    pval.quad <- pf(quad.summ$fstatistic[1], quad.summ$fstatistic[2], quad.summ$fstatistic[3],lower.tail = FALSE)\n    \n    coeffs.quad1 <- t(data.frame(summary(fit.quad)$coefficients[2,]))\n   # coeffs.quad2 <- t(data.frame(summary(fit.quad)$coefficients[3,]))\n  #  coeffs.quad2 <- summary(fit.quad)[[\"coefficients\"]][3,]\n    coeffs.quad3 <- summary(fit.quad)$coefficients[,1:4]\n    \n    \n    x <- coeffs.quad3\n    \n  #  x <- cbind(r2.quad, coeffs.quad1, coeffs.quad2)\n    \n  #  rownames(x) <- as.character(hydroname)\n    \n #   colnames(x) <- c(\"R2.quad\", \"est\", \"stderr\", \"t\", \"P\", \"est.quad\", \"stderr.quad\", \"t.quad\", \"P.quad\")\n    \n    x <- as.data.frame(x)\n    x$metric <- as.character(hydroname)\n    x$p.val <- pval.quad\n    x$R2.adj <- signif(summary(fit.quad)$adj.r.squared, 5)\n    \n    #x <- cbind(as.character(hydroname), x)\n    \n    #   colnames(x) <- c(\"metric\", \"pval.linear\", \"r2.linear\", \"pval.quad\", \"r2.quad\")\n    \n    if (pval.quad < 0.05) { \n      y <- rbind(y,x)\n    }\n    \n  }\n  \n  var <- deparse(substitute(var))\n  \n  #y$padj.linear <- p.adjust(y$pval.linear, method=\"BH\")\n  #y$padj.quad <- p.adjust(y$pval.quad, method=\"BH\")\n  \n  y <- nth.delete(y, 1, 3)\n  \n  y <- rework(y)\n  \n  y <- y[,c(5,6,7,1:4,8:11)]\n  \n  colnames(y) <- c(\"metric\", \"p\", \"R2.adj\", \"est\", \"stderr\", \"t\", \"p.term\", \"est.quad\", \"stderr.quad\", \"t.quad\", \"p.term.quad\")\n  \n  write.csv(y, sprintf(\"%s/%s_stats.csv\", statsDir, var))\n  \n  return(y)\n  \n}\n",
    "created" : 1435810850126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "11|18|13|0|\n16|27|31|0|\n34|27|52|0|\n55|33|66|0|\n69|26|90|2|\n99|25|115|0|\n117|26|139|0|\n142|36|167|0|\n273|38|323|0|\n325|41|364|0|\n367|37|369|0|\n371|24|375|0|\n377|45|436|0|\n439|43|508|0|\n",
    "hash" : "756981372",
    "id" : "F6EBECF8",
    "lastKnownWriteTime" : 1438229494,
    "path" : "C:/Users/James/Desktop/stuff/data/analysis/R/SEQLD/scripts/functions.R",
    "project_path" : "scripts/functions.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "type" : "r_source"
}