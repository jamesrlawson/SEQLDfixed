{
    "contents" : "source(\"scripts/functions.R\")\n#source(\"scripts/trait_cleaning.R\")\n\nlibrary(plyr)\nlibrary(reshape2)\nlibrary(reshape)\nlibrary(FD)\nlibrary(ggplot2)\nlibrary(missForest)\nlibrary(mice)\nlibrary(SYNCSA)\nlibrary(fossil)\n\n\nalltraits <- read.csv(\"data/alltraits.csv\", header=T)\nsites <- read.csv(\"data/sites.csv\", header=T)\nvegSurveys <- read.csv(\"data/vegSurveys.csv\", header=T)\nhydro <- read.csv(\"data/hydro_1975-2008.csv\", header=T)\nsource_GF <- read.csv(\"data/source_growthForm1.csv\", header=T)\n\nalltraits <- merge(alltraits, source_GF, all.x=TRUE)\n\nsource <- data.frame(cbind(alltraits[\"source\"], alltraits[\"Taxon\"])) \n\n#alltraits <- subset(alltraits, source != \"exotic\")\n\n\nalltraits$X <- NULL\n\n  alltraits <- missing(alltraits)\n  alltraits.discarded <- subset(alltraits, missing >=3)\n  alltraits <- subset(alltraits, missing <3) # only keep species with less than X NA trait values\n  alltraits <- rbind(alltraits, alltraits.discarded[46,])\n#  alltraits <- alltraits[-57,]\n#  alltraits <- alltraits[-12,]\n  alltraits$missing <- NULL\n  \n\n# normalise data\n\nalltraits$SLA <- log10(alltraits$SLA)\nalltraits$leaf.area <- sqrt(alltraits$leaf.area)\nalltraits$seed.mass <- log10(alltraits$seed.mass)\nalltraits$flowering.duration <- sqrt(alltraits$flowering.duration)\nalltraits$maximum.height <- sqrt(alltraits$maximum.height)\n#alltraits$leaf.narrowness <- log10(alltraits$leaf.narrowness)\n\n# impute missing data using missForests\n\n imputed <- missForest(alltraits[,2:8], maxiter = 100, ntree= 1000, verbose =TRUE, replace=TRUE, variablewise=TRUE)\n  alltraits.imputed <- data.frame(cbind(alltraits[1], as.data.frame(imputed[1])))\n  colnames(alltraits.imputed) <- c(\"Taxon\", \n                         \"flowering.duration\",\n                          \"leaf.area\",\n#                         \"leaf.narrowness\",\n                         \"maximum.height\",\n                         \"seed.mass\",\n                         \"SLA\",\n                          \"wood.density\",\n                         \"growthForm\")\n  alltraits.imputed$wood.density <- alltraits$wood.density\n#  alltraits.imputed$leaf.area <- alltraits$leaf.area\n#  alltraits.imputed$seed.mass <- alltraits$seed.mass\n#  alltraits.imputed$maximum.height <- alltraits$maximum.height\n  alltraits.imputed$growthForm <- alltraits$growthForm\n\n  alltraits.orig <- alltraits\n  alltraits <- alltraits.imputed\n  \n  alltraits <- merge(alltraits, source, all.x=TRUE)\n\n# wide > long format\n\nvegSurveys <- melt(vegSurveys, id.vars = c(\"site\", \"transect\", \"transect.area\"))\n\ncolnames(vegSurveys)[4] <- c(\"Taxon\")\ncolnames(vegSurveys)[5] <- c(\"count\")\n\nvegSurveys$Taxon <- as.factor(trim(vegSurveys$Taxon)) # trim white spaces\nlevels(vegSurveys$Taxon) <- capitalise(levels(vegSurveys$Taxon)) # make sure spp names are properly capitalised\n\n# find unmodified species richness, area standardised spp. richness, chao estimated and area standardised spp. richness\n\n#richness <- ddply(vegSurveys, .(site, Taxon), summarise, sum = sum(count))\n#richness$sum[richness$sum>0] <- 1 # convert counts to presabs\n#richness <- ddply(richness, .(site), summarise, richness = sum(sum))\n\n\ntransectArea <- ddply(vegSurveys, .(site), summarise, transectArea = sum(unique((transect.area))))\nrichness <- ddply(vegSurveys, .(site, Taxon), summarise, sum = sum(count))\nrichness$sum[richness$sum>0] <- 1 # convert counts to presabs\nrichness <- ddply(richness, .(site), summarise, richness = sum(sum))\nrichness$transectArea <- transectArea$transectArea\nrichness$transectArea.ln <- log(richness$transectArea)\nrichness$richness.stand <- richness$richness / richness$transectArea\nrichness$richness.stand.ln <- richness$richness / richness$transectArea.ln\n\nvegSurveysx <- read.csv(\"data/vegSurveys.csv\", header=T)\nrich.estimated <- rich.est(vegSurveysx)\n\nrichness$richness.stand.chao <- rich.estimated$chao / richness$transectArea\nrichness$richness.stand.ACE <- rich.estimated$ACE / richness$transectArea\nrichness$richness.stand.boot <- rich.estimated$bootstrap / richness$transectArea\nrichness$richness.stand.jack <- rich.estimated$jacknife / richness$transectArea\n\n\n\n# include only species with more than X occurrences at any site\n\n#vegSurveys$site <- as.factor(vegSurveys$site)\n#abundance <- ddply(vegSurveys, .(Taxon, site), summarise, countSum = sum(count))\n#vegSurveys.short <- ddply(abundance,  .(Taxon), summarise, maxCount = max(countSum))\n#vegSurveys.short <- subset(vegSurveys.short, maxCount > 1) # insert X here\n#vegSurveys <- vegSurveys[vegSurveys$Taxon %in% vegSurveys.short$Taxon, ]\n\n# convert transect counts -> site avg # per hectare\n\nvegSurveys$perHa <- vegSurveys$count * 10000 / vegSurveys$transect.area\n\nvegSurveys <- ddply(vegSurveys, .(site, Taxon), summarise, avgPerHa = mean(perHa))\n\n\nvegSurveys_all <- vegSurveys\n\n# find total cover in stems/Ha for each site\n\nvegSurveys.totalcover <- ddply(vegSurveys, .(site), summarise, totalcover = sum(avgPerHa, na.rm=TRUE))\n\nvegSurveys <- merge(vegSurveys, vegSurveys.totalcover)\n\nvegSurveys <- merge(vegSurveys, alltraits) \n\nvegSurveys <- vegSurveys[order(vegSurveys$site),]\n\n# get only traits for species which are present in surveys (kind of circular code here, as this is also done for vegSurveys above)\n\nalltraits <- vegSurveys[!duplicated(vegSurveys[,c(\"Taxon\")]),]\nalltraits <- data.frame(cbind(alltraits[\"Taxon\"],alltraits[,5:11]))\n\n# find proportional abundance of exotics spp.\n\nvegSurveys.ex <- subset(vegSurveys, source == \"exotic\")\n\nexotics <- ddply(vegSurveys.ex, .(site), summarise, proportionExotic = sum(avgPerHa) / totalcover)\nexotics <- unique(exotics)\n\nhydrosites$exotics <- exotics$proportionExotic\n\nwrite.csv(vegSurveys.ex1, \"output/vegSurveysex.csv\")\n\nvegSurveys.ex1 <- vegSurveys.ex\nvegSurveys.ex1$avgPerHa[vegSurveys.ex1$avgPerHa>0] <- 1 # convert counts to presabs\nexotics1 <- ddply(vegSurveys.ex1, .(site), summarise, exoticRich = sum(avgPerHa))\n\nrichness$exoticRich <- exotics1$exoticRich\nrichness$exoticRich.ln <- richness$exoticRich / richness$transectArea.ln\n\n# find proportion of cover for which trait data is available\n\nvegSurveys.representedcover  <- merge(ddply(vegSurveys, .(site), summarise, representedcover = sum(avgPerHa, na.rm=TRUE)),\n                                      vegSurveys.totalcover)\n\nvegSurveys.representedcover$proportion <- vegSurveys.representedcover$representedcover / vegSurveys.representedcover$totalcover\n\n### data density ####\n\ndata.density <- data.frame(cbind(\n  c(\"wood.density\", \"maximum.height\", \"seed.mass\", \"SLA\", \"flowering.duration\", \"leaf.area\"),\n  c(\n    length(na.omit(alltraits.orig$wood.density)) / length(alltraits.orig$wood.density),\n    length(na.omit(alltraits.orig$maximum.height)) / length(alltraits.orig$maximum.height),\n    length(na.omit(alltraits.orig$seed.mass)) / length(alltraits.orig$seed.mass),\n    length(na.omit(alltraits.orig$SLA)) / length(alltraits.orig$SLA),\n    length(na.omit(alltraits.orig$flowering.duration)) / length(alltraits.orig$flowering.duration),\n    length(na.omit(alltraits.orig$leaf.area)) / length(alltraits.orig$leaf.area))))\n\ncolnames(data.density) <- c(\"trait\", \"data density\")\n\n\n# transform abundance data\n#vegSurveys$avgPerHa <- sqrt(vegSurveys$avgPerHa)\n\n# transform avgPerHa into relative abundance\nvegSurveys$relabun <- vegSurveys$avgPerHa / vegSurveys$totalcover\n\nabun <- cast(vegSurveys, site ~ Taxon, value=\"avgPerHa\", fill=0)\n#abun <- cast(vegSurveys, site ~ Taxon, value=\"relabun\", fill=0)\n\n#abun <- round(abun)\n\nabun <- abun[order(abun$site),]\n#abun <- abun[-46,] \nabun$site <- NULL\nabun <- data.frame(abun)\n\nabun.ord <- abun[,order(names(abun))]\n\n\nTaxon <- alltraits$Taxon \nalltraits$Taxon <- NULL\nrownames(alltraits) <- Taxon # dbFD requires this format\nrm(Taxon)\n\n\n#write.csv(alltraits, \"output/alltraits_max2.csv\")\n\n# calculate FD\n\nFD <- dbFD(alltraits, \n           abun.ord,\n           w.abun = TRUE,  \n           stand.x = TRUE,\n           corr = c(\"cailliez\"),\n                  #         calc.FGR = TRUE, \n                  #         clust.type = c(\"kmeans\"),\n                   #        km.inf.gr = c(2),\n                   #        km.sup.gr = c(10),\n                   #        km.iter = (100),\n                           calc.FDiv = TRUE, \n                           calc.FRic = TRUE,\n           m = \"max\",\n           calc.CWM=TRUE, \n           print.pco=TRUE, \n    #                      scale.RaoQ=TRUE, \n                          stand.FRic=TRUE\n)\n\n\nFD.redun <- rao.diversity(abun, traits=alltraits)\n\n\n\n\n# trait correlations\n\n#cor(alltraits)\n#alltraits.pca <- prcomp(alltraits, center=TRUE, scale=TRUE, retx=TRUE)\n#summary(alltraits.pca)\n\n\n# hydrological gradient analysis\n\n#hydro <- subset(hydro, gaugeID != c(\"138001A\"))\n\n\nhydro.pca <- prcomp(hydro[,3:36], retx = TRUE, center = TRUE, scale = TRUE)\nhydro$hydro.pc1 <- hydro.pca$x[,1]\nhydro$hydro.pc2 <- hydro.pca$x[,2]\nhydro$hydro.pc3 <- hydro.pca$x[,3]\nhydro$hydro.pc4 <- hydro.pca$x[,4]\n\n\nhydrosites <- merge(hydro, sites, all.y=TRUE, by = c(\"gaugeID\"))\nhydrosites <- hydrosites[order(hydrosites$site),]\nsiteNums <- hydrosites$site\nhydrosites <- cbind(hydrosites[,3:41])\n\n\nhydrosites$site <- siteNums\nhydrosites$FDis <- FD$FDis\nhydrosites$FDiv <- FD$FDiv\nhydrosites$FRic <- FD$FRic\nhydrosites$FEve <- FD$FEve\nhydrosites$RaoQ <- FD$RaoQ\nhydrosites$FGR <- FD$FGR\nhydrosites$nbsp <- FD$nbsp\nhydrosites$simpson <- FD.redun$Simpson\nhydrosites$FunRao <- FD.redun$FunRao\nhydrosites$redun <- FD.redun$FunRedundancy\nhydrosites$nbsp <- FD$nbsp\n\n#hydrosites$g1 <- FD$gr.abun$group1\n#hydrosites$g2 <- FD$gr.abun$group2\n#hydrosites$g3 <- FD$gr.abun$group3\n#hydrosites$g4 <- FD$gr.abun$group4\n#hydrosites$g5 <- FD$gr.abun$group5\n#hydrosites$g6 <- FD$gr.abun$group6\n#hydrosites$g7 <- FD$gr.abun$group7\n#hydrosites$g8 <- FD$gr.abun$group8\n#hydrosites$FGR <- FD$FGR\n\n\n#hydrosites$richness <- richness$richness.stand.ACE\nhydrosites$richness <- richness$richness.stand\nhydrosites$exotics <- exotics$proportionExotic\n\nCWM <- FD$CWM\n\nhydrosites$SLA<- CWM$SLA\nhydrosites$seed.mass <- CWM$seed.mass\nhydrosites$maximum.height <- CWM$maximum.height\nhydrosites$flowering.duration <- CWM$flowering.duration\nhydrosites$wood.density <- CWM$wood.density\nhydrosites$leaf.area <- CWM$leaf.area\n#hydrosites$leaf.narrowness<- CWM$leaf.narrowness\n\n\nhydrosites_imputed <- hydrosites\n\nFRic.SES.stats <- read.csv(\"data/SESFRic_stats1.csv\", header=TRUE)\nFDis.SES.stats <- read.csv(\"data/SESFDis_stats.csv\", header=TRUE)\n\nhydrosites$FRic.SES <- FRic.SES.stats$FRic.SES\nhydrosites$FDis.SES <- FDis.SES.stats$FDis.SES\n\nhydrosites <- hydrosites[,-36]\n\n#hydrositesz <- hydrosites[,-36]\n\ngetStats(hydrositesz, hydrosites$FDis, FD)\ngetStats(hydrositesz, hydrosites$FDiv, FD)\ngetStats(hydrositesz, hydrosites$FRic, FD)\ngetStats(hydrositesz, hydrosites$FEve, FD)\n#getStats(hydrosites, hydrosites$RaoQ, FD)\n#getStats(hydrosites, hydrosites$nbsp, FD)\n\n#getStats(hydrosites, hydrosites$richness, FD)\n\ngetAllStats(hydrositesz, hydrosites$FDis.SES, FD)\ngetStats(hydrositesz, hydrositesz$FDiv.SES, FD)\ngetStats(hydrositesz, hydrositesz$FEve.SES, FD)\ngetStats(hydrositesz, hydrositesz$FRic.SES, FD)\n\n\n\n#getStats(hydrosites, hydrosites$simpson, FD)\n#getStats(hydrosites, hydrosites$FunRao, FD)\n#getStats(hydrosites, hydrosites$redun, FD)\n#getStats(hydrosites, hydrosites$richness, FD)\n#getStats(hydrosites, hydrosites$exotics, FD)\n\ngetStats(hydrositesz, hydrosites$SLA, CWM)\ngetStats(hydrositesz, hydrosites$seed.mass, CWM)\ngetStats(hydrositesz, hydrosites$maximum.height, CWM)\ngetStats(hydrositesz, hydrosites$flowering.duration, CWM)\ngetStats(hydrositesz, hydrosites$wood.density, CWM)\ngetStats(hydrositesz, hydrosites$leaf.area, CWM)\n#getStats(hydrositesz, hydrosites$leaf.narrowness, CWM)\n\n\n\n#plot.linear(hydrosites, hydrosites$FDis, FD)\n#plot.linear(hydrosites, hydrosites$FRic, FD)\n#plot.linear(hydrosites, hydrosites$FEve, FD)\n\n#plot.quad(hydrosites, hydrosites$FDis, FD)\n#plot.quad(hydrosites, hydrosites$FRic, FD)\n#plot.quad(hydrosites, hydrosites$FEve, FD)\n\n#alltraitssp <- read.csv(\"data/alltraits.csv\", header=T)\n\n#g1 <- subset(FD.spfgr, FD.spfgr == 1)\n#g1.traits <- alltraitssp[alltraitssp$Taxon %in% g1$species,]\n#g1.means <- colMeans(g1.traits[,3:8], na.rm=TRUE)\n\n#g2 <- subset(FD.spfgr, FD.spfgr == 2)\n#g2.traits <- alltraitssp[alltraitssp$Taxon %in% g2$species,]\n#g2.means <- colMeans(g2.traits[,3:8], na.rm=TRUE)\n\n#g3 <- subset(FD.spfgr, FD.spfgr == 3)\n#g3.traits <- alltraitssp[alltraitssp$Taxon %in% g3$species,]\n#g3.means <- colMeans(g3.traits[,3:8], na.rm=TRUE)\n\n#g4 <- subset(FD.spfgr, FD.spfgr == 4)\n#g4.traits <- alltraitssp[alltraitssp$Taxon %in% g4$species,]\n#g4.means <- colMeans(g4.traits[,3:8], na.rm=TRUE)\n\n#g5 <- subset(FD.spfgr, FD.spfgr == 5)\n#g5.traits <- alltraitssp[alltraitssp$Taxon %in% g5$species,]\n#g5.means <- colMeans(g5.traits[,3:8], na.rm=TRUE)\n\n#g6 <- subset(FD.spfgr, FD.spfgr == 6)\n#g6.traits <- alltraitssp[alltraitssp$Taxon %in% g6$species,]\n#g6.means <- colMeans(g6.traits[,3:8], na.rm=TRUE)\n\n#g7 <- subset(FD.spfgr, FD.spfgr == 7)\n#g7.traits <- alltraitssp[alltraitssp$Taxon %in% g7$species,]\n#g7.means <- colMeans(g7.traits[,3:8], na.rm=TRUE)\n\n#group.means <- rbind(g1.means, g2.means, g3.means, g4.means, g5.means, g6.means, g7.means)\n#group.means\n\n#getStats(hydrositesz, hydrositesz$g1, FD)\n#getStats(hydrositesz, hydrositesz$g2, FD)\n#getStats(hydrositesz, hydrositesz$g3, FD)\n#getStats(hydrositesz, hydrositesz$g4, FD)\n#getStats(hydrositesz, hydrositesz$g5, FD)\n#getStats(hydrositesz, hydrositesz$g6, FD)\n#getStats(hydrositesz, hydrositesz$g7, FD)\n\n#getStats(hydrositesz, hydrositesz$FGR, FD)\n\n#FD.spfgr <- as.data.frame(FD$spfgr)\n#FD.spfgr$species <- rownames(FD.spfgr)\n\n\n",
    "created" : 1435802390234.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2677915060",
    "id" : "F563A7D5",
    "lastKnownWriteTime" : 1451881885,
    "path" : "C:/Users/James/Desktop/stuff/data/analysis/R/SEQLD_fixed/scripts/FD.R",
    "project_path" : "scripts/FD.R",
    "properties" : {
        "tempName" : "Untitled5"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}